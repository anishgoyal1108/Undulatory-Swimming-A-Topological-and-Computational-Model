import math
class Histogram:
    def __init__(self, number_of_gaussians):
        self.classifier_dic = {}
        self.probability_dic = {}
        self.column_bin_dic = {}
        self.unique_labels = []
        self.number_of_gaussians = number_of_gaussians

    def train(self, synaptic_data_file):
        """ Trains the naive bayes classifier """
        
        number_of_bins = self.number_of_gaussians
        data_dic, total_number_of_rows, data_list = self.load_synaptic_data(synaptic_data_file)
        total_number_of_columns = len(data_list[0]) - 1
        bin_range_dic = {}
        column_bin_dic = {}
        for x in range(total_number_of_columns):
            bin_list, bin_range = self.binning(x, number_of_bins, data_list)
            column_bin_dic[x] = bin_list
            bin_range_dic[x] = bin_range
        self.column_bin_dic = column_bin_dic
        data_dic = self.change_data(column_bin_dic, data_dic)
        self.probability_dic = self.calculate_probabilities(data_dic)
        self.classifier_dic = self.calculate_synaptic_values(data_dic)

    def load_synaptic_data(self, synaptic_data_file):
        """Loads the synaptic data to the dictionary"""
        data_dic = {}
        data_list = []
        with open(synaptic_data_file, "r") as f:
            for line in f:
                time, synaptic_value = map(float, line.strip().split())
                time = int(time)
                if time in data_dic:
                    data_dic[time].append(synaptic_value)
                else:
                    data_dic[time] = [synaptic_value]
                data_list.append((time, synaptic_value))
        return data_dic, len(data_list), data_list

    def binning(self, column_number, total_bins, data_list):
        """performs binning on given dimension"""
        min_value = min(data_list, key=lambda x: x[column_number])[column_number]
        max_value = max(data_list, key=lambda x: x[column_number])[column_number]
        bin_range = (max_value - min_value) / float(total_bins)
        bin_list = []
        for i in range(total_bins):
            bin_list.append((min_value + i * bin_range, min_value + (i + 1) * bin_range))
        return bin_list, bin_range

    def change_data(self, column_bin_dic, data_dic):
        """changes the data to the bin number indicating which bin does the data goes in"""
        changed_data_dic = {}
        for time, values in data_dic.items():
            changed_data_dic[time] = [self.get_bin_index(value, column_bin_dic[0]) for value in values]
        return changed_data_dic

    def get_bin_index(self, value, bin_list):
        for i, (start, end) in enumerate(bin_list):
            if start <= value < end:
                return i
        return len(bin_list) - 1  # Last bin

    def calculate_probabilities(self, data_dic):
        probability_dic = {}
        for time, values in data_dic.items():
            probability_dic[time] = len(values)
        return probability_dic

    def calculate_synaptic_values(self, data_dic):
        classifier_dic = {}
        for time, values in data_dic.items():
            for bin_index in values:
                if bin_index in classifier_dic:
                    classifier_dic[bin_index].append(time)
                else:
                    classifier_dic[bin_index] = [time]
        return classifier_dic

    def classify(self, time):
        """Classifies a given time"""
        if time in self.classifier_dic:
            bin_occurrences = self.classifier_dic[time]
            total_occurrences = self.probability_dic[time]
            return sum(bin_occurrences) / total_occurrences
        else:
            return None

def main():
    number_of_gaussians = int(input("Enter the number of Gaussian bins: "))
    synaptic_data_file = "synaptic_data.txt"
    histogram = Histogram(number_of_gaussians)
    histogram.train(synaptic_data_file)
    time = int(input("Enter the time to classify: "))
    synaptic_value = histogram.classify(time)
    if synaptic_value is not None:
        print("Synaptic value at time {}: {}".format(time, synaptic_value))
    else:
        print("No occurrences at time {}".format(time))

main()
